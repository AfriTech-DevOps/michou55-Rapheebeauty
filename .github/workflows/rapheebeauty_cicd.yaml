# name: "Building, Pushing, and Testing Raphee Beauty Docker Images"

# on:
#   push:
#     branches:
#       - master
#       - dev
#       - qa
#       - prod
#   pull_request:
#     branches:
#       - master
#       - dev
#       - qa
#       - prod

# jobs:
#   check-branch:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2
#       - name: Check branch name
#         run: |
#           if [[ "${{ github.event_name }}" == "pull_request" && ("${{ github.event.pull_request.base.ref }}" != "dev" && "${{ github.event.pull_request.base.ref }}" != "prod" && "${{ github.event.pull_request.base.ref }}" != "qa") ]]; then
#               echo "Invalid merge destination. Please merge into dev, prod, or qa only."
#               exit 1
#           fi

#   sonarqube-scan:
#     runs-on: ubuntu-latest
#     permissions: read-all
#     needs: check-branch
#     if: github.event_name == 'push' ||  (github.ref_name == 'refs/heads/dev') || (github.ref_name == 'refs/heads/qa') || (github.ref_name == 'refs/heads/prod')
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#   test:
#     name: "Run Tests"
#     runs-on: ubuntu-latest
#     needs: [check-branch, sonarqube-scan]

#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Run Tests"
#         run: |
#           echo "MYSQL_HOST: ${{ secrets.MYSQL_HOST }}" >> .env
#           echo "MYSQL_USER: ${{ secrets.MYSQL_USER }}" >> .env
#           echo "MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> .env
#           echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}" >> .env
#           echo "MYSQL_PORT: ${{ secrets.MYSQL_PORT }}" >> .env
#           echo "REDIS_HOST: ${{ secrets.REDIS_HOST }}" >> .env
#           echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}" >> .env
#           echo "REDIS_DB: ${{ secrets.REDIS_DB }}" >> .env
#           echo "LOCALHOST: ${{ secrets.LOCALHOST }}" >> .env


#           pip install -r requirements.txt -r requirements.txt --no-cache-dir
#           pytest -v
    
#   build-image-dev:
#     name: "Build Docker Image for Dev"
#     runs-on: ubuntu-latest
#     needs: [check-branch, sonarqube-scan, test]
#     if: github.ref_name == 'refs/heads/dev' && github.event_name == 'push'
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Build Docker Image"
#         run: |
#           echo "MYSQL_HOST: ${{ secrets.MYSQL_HOST }}" >> .env
#           echo "MYSQL_USER: ${{ secrets.MYSQL_USER }}" >> .env
#           echo "MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> .env
#           echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}" >> .env
#           echo "MYSQL_PORT: ${{ secrets.MYSQL_PORT }}" >> .env
#           echo "REDIS_HOST: ${{ secrets.REDIS_HOST }}" >> .env
#           echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}" >> .env
#           echo "REDIS_DB: ${{ secrets.REDIS_DB }}" >> .env
#           echo "LOCALHOST: ${{ secrets.LOCALHOST }}" >> .env

#           docker build -t raphee-beauty-dev .
#           docker tag raphee-beauty-dev:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-dev:latest
#           docker tag raphee-beauty-dev:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-dev:${{ github.sha }}
#       - name: "Push Docker Image"
#         run: |
#           echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-dev:latest
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-dev:${{ github.sha }}

#   build-image-qa:
#     name: "Build Docker Image for QA"
#     runs-on: ubuntu-latest
#     needs: [check-branch, sonarqube-scan, test]
#     if: github.ref_name == 'refs/heads/qa' && github.event_name == 'push'
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Build Docker Image"
#         run: |
#           echo "MYSQL_HOST: ${{ secrets.MYSQL_HOST }}" >> .env
#           echo "MYSQL_USER: ${{ secrets.MYSQL_USER }}" >> .env
#           echo "MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> .env
#           echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}" >> .env
#           echo "MYSQL_PORT: ${{ secrets.MYSQL_PORT }}" >> .env
#           echo "REDIS_HOST: ${{ secrets.REDIS_HOST }}" >> .env
#           echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}" >> .env
#           echo "REDIS_DB: ${{ secrets.REDIS_DB }}" >> .env
#           echo "LOCALHOST: ${{ secrets.LOCALHOST }}" >> .env

#           docker build -t raphee-beauty-qa .
#           docker tag raphee-beauty-qa:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-qa:latest
#           docker tag raphee-beauty-qa:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-qa:${{ github.sha }}
#       - name: "Push Docker Image"
#         run: |
#           echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-qa:latest
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-qa:${{ github.sha }}

#   build-image-prod:
#     name: "Build Docker Image for Prod"
#     runs-on: ubuntu-latest
#     needs: [check-branch, sonarqube-scan, test]
#     if: github.ref_name == 'refs/heads/prod' && github.event_name == 'push'
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Build Docker Image"
#         run: |
#           echo 
#           docker build -t raphee-beauty-prod .
#           docker tag raphee-beauty-prod:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-prod:latest
#           docker tag raphee-beauty-prod:latest ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-prod:${{ github.sha }}
#       - name: "Push Docker Image"
#         run: |
#           echo "MYSQL_HOST: ${{ secrets.MYSQL_HOST }}" >> .env
#           echo "MYSQL_USER: ${{ secrets.MYSQL_USER }}" >> .env
#           echo "MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}" >> .env
#           echo "MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}" >> .env
#           echo "MYSQL_PORT: ${{ secrets.MYSQL_PORT }}" >> .env
#           echo "REDIS_HOST: ${{ secrets.REDIS_HOST }}" >> .env
#           echo "REDIS_PORT: ${{ secrets.REDIS_PORT }}" >> .env
#           echo "REDIS_DB: ${{ secrets.REDIS_DB }}" >> .env
#           echo "LOCALHOST: ${{ secrets.LOCALHOST }}" >> .env
          
#           echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-prod:latest
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/raphee-beauty-prod:${{ github.sha }}

#   notifiers-success:
#     name: "Send Slack Notification on Success"
#     runs-on: ubuntu-latest
#     # needs: [check-branch, sonarqube-scan, build-image-qa, build-image-prod]
#     needs: [check-branch, sonarqube-scan, test, build-image-dev, build-image-qa, build-image-prod]
#     if: always() && success() && (github.event_name == 'push' || github.event_name == 'pull_request')
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Send Slack Notification"
#         run: |
#           curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"GitHub build results: :white_check_mark: Success \n
#           Build on branch ${{ github.ref_name }} has successfully completed. \nCommit SHA: ${{ github.sha }} \n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\"}" ${{ secrets.SLACK_WEBHOOK }}

#   notifiers-failure:
#     name: "Send Slack Notification on Failure"
#     runs-on: ubuntu-latest
#     # needs: [check-branch, build-image-dev, build-image-qa, build-image-prod]
#     needs: [check-branch, sonarqube-scan, test, build-image-dev, build-image-qa, build-image-prod]
#     if: always() && failure() && (github.event_name == 'push' || github.event_name == 'pull_request')
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Send Slack Notification"
#         run: |
#           curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"GitHub build results: :x: Failure \n
#           Build on branch  ${{ github.ref_name }} has failed \nCommit SHA: ${{ github.sha }} \n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\"}" ${{ secrets.SLACK_WEBHOOK }}

#   notifiers-cancelled:
#     name: "Send Slack Notification on Cancelled"
#     runs-on: ubuntu-latest
#     # needs: [check-branch, build-image-dev, build-image-qa, build-image-prod]
#     needs: [check-branch, sonarqube-scan, test, build-image-dev, build-image-qa, build-image-prod]
#     if: always() && cancelled() && (github.event_name == 'push' || github.event_name == 'pull_request')
#     steps:
#       - name: "Checkout"
#         uses: actions/checkout@v2
#       - name: "Send Slack Notification"
#         run: |
#           curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"GitHub build results: :warning: Cancelled \n
#           Build on branch  ${{ github.ref_name }} has been canceled \nCommit SHA: ${{ github.sha }} \n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\"}" ${{ secrets.SLACK_WEBHOOK }}
